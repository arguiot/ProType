class ProType{get Component(){return class{constructor(a){this.component=a,this.state={},this.render()}render(){this.component.innerHTML=""}}}mountExternalGroup(a,b){const c=new b(a,null);return c}get Group(){return class{changeHandler(){}constructor(a,b){this.group=a,this.viewName=b,this.state={},this.init()}init(){}mountComponent(a,b){const c=new b(a);return c}setState(a){JSON.stringify(a)!=JSON.stringify(this.state)&&(this.state=a,this.changeHandler(this.state))}}}Router(a){document.addEventListener("DOMContentLoaded",()=>{let b={};const c=window.location.href;b.url=c;const d=window.location.origin;b.origin=d;const e=window.location.pathname;b.path=e;const f=window.location.hash;b.hash=f;const g=window.location.search.substring(1).split("&");let h={};for(let a=0;a<g.length;a++){const b=g[a].split("=");h[decodeURIComponent(b[0])]=decodeURIComponent(b[1])}b.search=h,b.pathValue=e.split("/"),a(b)})}get ViewController(){return class{constructor(a,b,c){this.view=a,this.views=c,this.viewsName=b;const d=this.views.indexOf(this.view);this.viewName=this.viewsName[d],this.pipeline={},this.preload()}mountGroup(a,b){const c=new b(a,this.viewName);return c}mountGroups(a,b){let c=[];for(let d=0;d<a.length;d++)c.push(new b(a[d],this.viewName));return c}onPipelineChange(){}preload(){}willDisappear(a="Main"){}willShow(a="Main"){}}}autoMount(){const a=[...arguments],b=document.querySelectorAll("[protype]");if(this.views.push(...b),b.length!=a.length)throw"Controllers and Elements don't match";for(let a=0;a<b.length;a++)this.viewsName.push(b[a].getAttribute("protype"));for(let c=0;c<a.length;c++)this.controllers.push(new a[c](b[c],this.viewsName,this.views))}constructor(){this.version="v0.1.1",this.views=[],this.viewsName=[],this.controllers=[],this.currentView="",this.workspace={}}mount(){const a=[...arguments];for(let b=0;b<a.length;b++)this.views.push(a[b][1]),this.viewsName.push(a[b][0]);for(let b=0;b<a.length;b++)this.controllers.push(new a[b][2](this.views[b],this.viewsName,this.views))}performTransition(a,b){const c=Object.assign({animation:"none",duration:"1s",Group:!1},b),d=this.currentView,e=this.viewsName.indexOf(d),f=this.views[e],g=this.controllers[e],h=this.viewsName.indexOf(a),i=this.views[h].cloneNode(!0);this.views[h].parentNode.replaceChild(i,this.views[h]),this.views[h]=i;const j=this.views[h],k=this.controllers[h];if(k.view=j,k.views=this.views,this.currentView=a,j.setAttribute("style",""),j.style["z-index"]="-10",k.willShow(),!1!==c.Group){const a=()=>{j.style.display="block",j.style["z-index"]="0",f.style.display="none",g.willDisappear()};"none"===c.animation?a():(c.Group.style.animation=`${c.animation} ${c.duration} forwards`,c.Group.addEventListener("animationend",()=>a()))}else{j.style.display="block";const a=()=>{j.style["z-index"]="0",f.style.display="none",g.willDisappear(),j.style.display="block"};"none"===c.animation?a():(f.style.animation=`${c.animation} ${c.duration} forwards`,f.addEventListener("animationend",()=>a()))}}get pipeline(){const a=this.currentView,b=this.viewsName.indexOf(a),c=this.views[b];return c.pipeline}setPipeline(a){const b=this.currentView,c=this.viewsName.indexOf(b),d=this.views[c].pipeline;JSON.stringify(d)!=JSON.stringify(a)&&(this.views[c].pipeline=a,this.views[c].onPipelineChange(a))}set(a){this.currentView=a,document.addEventListener("DOMContentLoaded",()=>{for(var b=0;b<this.views.length;b++)this.viewsName[b]==a?(this.views[b].style.display="block",this.controllers[b].willShow()):this.views[b].style.display="none"})}}"function"==typeof define&&define.amd?define(()=>new ProType):"undefined"==typeof exports?"undefined"!=typeof global&&(global.ProType=new ProType):("undefined"!=typeof module&&module.exports&&(exports=module.exports=new ProType),exports.ProType=new ProType);